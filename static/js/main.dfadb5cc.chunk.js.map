{"version":3,"sources":["Components/converter.js","App.js","serviceWorker.js","index.js"],"names":["Converter","props","currencyOptions","selectedCurrency","onChangeCurrency","onChangeAmount","amount","Row","Col","xs","lg","style","margin","type","className","value","onChange","map","option","key","BASE_URL","App","newAmount","OGAmount","useState","setCurrencyOptions","OGCurrency","setOGCurrency","newCurrency","setnewCurrency","exchangeRate","setExchangeRate","setAmount","amountInOGCurrency","setAmountInOGCurrency","useEffect","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","graphdata","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","Container","fluid","Jumbotron","color","e","target","width","height","options","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dfadb5cc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Container, Col, Row } from \"react-bootstrap\";\r\n\r\nexport default function Converter(props) {\r\n  const {\r\n    currencyOptions,\r\n    selectedCurrency,\r\n    onChangeCurrency,\r\n    onChangeAmount,\r\n    amount,\r\n  } = props;\r\n  return (\r\n    <Row>\r\n      <Col xs lg={2} />\r\n      <Col style={{ margin: \"0\" }}>\r\n        <input\r\n          type=\"number\"\r\n          className=\"input\"\r\n          value={amount}\r\n          onChange={onChangeAmount}\r\n        />\r\n      </Col>\r\n      <Col style={{ margin: \"0\" }}>\r\n        <select value={selectedCurrency} onChange={onChangeCurrency}>\r\n          {currencyOptions.map((option) => (\r\n            <option key={option} value={option}>\r\n              {option}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </Col>\r\n      <Col xs lg={2} />\r\n    </Row>\r\n  );\r\n}\r\n\r\n// still learning bootstrap grid have mercy on my soul","import React, { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Converter from \"./Components/converter\";\nimport { Jumbotron, Container, Row, Col } from \"react-bootstrap\";\n\n\n// API provided\nconst BASE_URL = \"https://open.exchangerate-api.com/v6/latest\";\n\nfunction App() {\n  // FIRST, we need to define our changing value points. Fetching our API will change these points by setting the state\n  const [currencyOptions, setCurrencyOptions] = useState([]);\n  const [OGCurrency, setOGCurrency] = useState();\n  const [newCurrency, setnewCurrency] = useState();\n  const [exchangeRate, setExchangeRate] = useState();\n  const [amount, setAmount] = useState(1);\n  const [amountInOGCurrency, setAmountInOGCurrency] = useState(true);\n\n  // Thanks Monarch Wadia for the fix! Anything other than EUR and USD didn't work before!\n  let newAmount, OGAmount;\n  if (amountInOGCurrency) {\n    OGAmount = amount;\n    newAmount = amount * exchangeRate;\n  } else {\n    newAmount = amount;\n    OGAmount = amount / exchangeRate;\n  }\n\n  //on selecting our data via converter, we set the state and render real time! This is necessary for our graph. \n  useEffect(() => {\n    fetch(BASE_URL)\n      .then((res) => res.json())\n      .then((data) => {\n        const firstCurrency = Object.keys(data.rates)[0];\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\n        setOGCurrency(data.base);\n        setnewCurrency(firstCurrency);\n        setExchangeRate(data.rates[firstCurrency]);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (OGCurrency != null && newCurrency != null) {\n      fetch(`${BASE_URL}?base=${OGCurrency}&symbols=${newCurrency}`)\n        .then((res) => res.json())\n        .then((data) => setExchangeRate(data.rates[newCurrency]));\n    }\n  }, [OGCurrency, newCurrency]);\n\n  function handleOGAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInOGCurrency(true);\n  }\n\n  function handlenewAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInOGCurrency(false);\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n  //BAR GRAPH\n  const graphdata = {\n    labels: [OGCurrency, newCurrency],\n    datasets: [\n      {\n        label: \"Currency Values\",\n        backgroundColor: \"rgba(255,99,132,0.2)\",\n        borderColor: \"rgba(255,99,132,1)\",\n        borderWidth: 1,\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n        hoverBorderColor: \"rgba(255,99,132,1)\",\n        data: [OGAmount, newAmount],\n      },\n    ],\n  };\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // Notice how we use Converter to set OGCurrency and set newCurrency values for each one. This is a one way conversion but we're on a timelimit\n  return (\n    <>\n      <Container fluid style={{backgroundColor: \"lightGrey\"}}>\n        <Jumbotron style={{backgroundColor: \"black\", color: \"white\"}}>\n          <h1>Conversion thing... Now with a Graph</h1>\n        </Jumbotron>\n        <Row>\n          <Col>\n            <Converter\n              currencyOptions={currencyOptions}\n              selectedCurrency={OGCurrency}\n              onChangeCurrency={(e) => setOGCurrency(e.target.value)}\n              onChangeAmount={handleOGAmountChange}\n              amount={OGAmount}\n            />\n          </Col>\n          <Col>\n            <Converter\n              currencyOptions={currencyOptions}\n              selectedCurrency={newCurrency}\n              onChangeCurrency={(e) => setnewCurrency(e.target.value)}\n              onChangeAmount={handlenewAmountChange}\n              amount={newAmount}\n            />\n          </Col>\n        </Row>\n        <Row>\n          {/* BAR GRAPH HERE */}\n          <Bar\n            data={graphdata}\n            width={80}\n            height={30}\n            options={{\n              maintainAspectRatio: true,\n              scales: {\n                yAxes: [\n                  {\n                    ticks: {\n                      beginAtZero: true,\n                    },\n                  },\n                ],\n              },\n            }}\n          />\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}